<section id="working-with-parent-zone">
 <title>Working with the Parent Zone</title>
 <para>As we mentioned in <xref
 linkend="signing-easy-start-upload-to-parent-zone" />, the format of the
 information you upload to your parent zone is dictated by your parent zone
 administrator, and the three main formats are:

  <orderedlist>
   <listitem><simpara>DS Record Format</simpara></listitem>
   <listitem><simpara>DNSKEY Format</simpara></listitem>
   <listitem><simpara>Trusted Key Format</simpara></listitem>
  </orderedlist>
 </para>

 <para>ccTLDs typically maintain their own lists of registrars and
 should have a list of which of those support DNSSEC.  ICANN maintains
 a list of accredited registrars who support DNSSEC for gTLDs:
 <simpara><ulink
 url="https://www.icann.org/resources/pages/deployment-2012-02-25-en"/>
 </simpara></para>

 <para>Next, we will take a look at how to get each of the three
 formats from your existing data.</para>

<para>First though, what existing data?  When <command>named</command> turned on
 automatic DNSSEC maintenance, more or less the first thing it did was
 to create the DNSSEC keys and put them in the key directory you
 specified in the <code>key-directory</code> option in the <code>zone</code>
 statement.  If you look in that directory, you will see two files with
 names like <code>Kexample.com.+013+10376.key</code>,
 <code>>Kexample.com.+013+10376.private</code> and
  <code>>Kexample.com.+013+10376.state</code>.  The one we are
 interested in is the one with the <code>.key</code> suffix, which
 contains the zone's public key. (The other files contain the zone's private
 key and the DNSSEC state associated with the key.) This is used to
 generate the information we need to pass to the parent.</para>

 <!-- === DS Record Format === -->
 <section id="parent-ds-record-format">
  <title>DS Record Format</title>

  <para>Below is an example of generating a DS record formats from the KSK we
  created earlier (<filename>Kexample.com.+013+10376.key</filename>):</para>

  <screen># <userinput>cd /etc/bind/keys/example.com</userinput>
 <userinput>dnssec-dsfromkey Kexample.com.+013+10376.key</userinput>
example.com. IN DS 10376 13 2 B92E22CAE0B41430EC38D3F7EDF1183C3A94F4D4748569250C15EE33B8312EF0</screen>

  <para>Some registrars many ask you to manually specify the types of algorithm
  and digest used. In this example, 13 represents the algorithm used, and 2
  represents the digest type (SHA-256).  The key tag or key ID is 10376.</para>

  <para>Alternatively, you could generate it from the DNSKEY records like
  this:</para>

  <screen>$ <userinput>dig @192.168.1.13 example.com. DNSKEY | dnssec-dsfromkey -f - example.com</userinput>
example.com. IN DS 10376 13 2 B92E22CAE0B41430EC38D3F7EDF1183C3A94F4D4748569250C15EE33B8312EF0</screen>

 </section>


 <!-- === DNSKEY Format === -->
 <section id="parent-dnskey-format">
  <title>DNSKEY Format</title>

  <para>Below is an example of the same key ID (10376) using DNSKEY format
  (actual key shortened for display):</para>

  <screen>example.com. 3600 IN DNSKEY 257 3 13 (6saiq99qDB...dqp+o0dw==) ; key id = 10376</screen>
  
  <para>The key itself is easy to find (it's kind of hard to miss that big long
  base64 string) in the file (again shortened for display).</para>

  <screen># <userinput>cd /etc/bind/keys/example.com</userinput>
# <userinput>cat Kexample.com.+013+10376.key</userinput>
; This is a key-signing key, keyid <userinput>10376</userinput>, for example.com.
; Created: 20200407150255 (Tue Apr  7 16:02:55 2020)
; Publish: 20200407150255 (Tue Apr  7 16:02:55 2020)
; Activate: 20200407150255 (Tue Apr  7 16:02:55 2020)
example.com. 3600 IN DNSKEY <userinput>257</userinput> 3 13 6saiq99qDB...dqp+o0dw==</screen>

  <para>Even though this is a combined-signing key (CSK), the file states that it
  is a key-signing key (KSK).  The reason for this is explained WHERE?  That the
  record represents a KSK can be seen in the DNSKEY line itself where the highlighted
  value is 257 (it would be 256 for a zone-signing key).</para>

  <para>Some registrars may ask you to manually specify the type of algorithm
  used and the key tag number. In our example above, the chosen algorithm is 13,
  and the key ID is 10376.</para>

 </section>


 <!-- === Trusted Key Format === -->
 <section id="parent-trusted-key-format">
  <title>Trusted Key Format</title>
  <para>This format is very similar to the DNSKEY format, the differences are
  mostly cosmetic. Below is an example of <varname>trusted-keys</varname>
  format (again, actual key shortened for display):</para>

  <screen>example.com. 257 3 13 "6saiq99qDB...dqp+o0dw==";</screen>

 </section>


 <!-- === What if My Parent Zone Doesn't Support DNSSEC? === -->
 <!--
 <section id="parent-no-dnssec-support">
  <title>What if My Parent Zone Doesn't Support DNSSEC?</title>
  <para>Without a parent zone to vouch for you, none of your new shiny DNSSEC
  records will be of much use when it comes to validation. Your
  zone will still be resolvable without cooperation from your parent
  zone, though.</para>

  <para>But not all hope is lost. Assuming you want everyone on the Internet to
  be able to validate your DNS data, you should do both of the following:
  </para>

  <orderedlist>
   <listitem>
    <simpara>Contact your domain registrar and/or registries and ask for DNSSEC support.</simpara>
   </listitem>
   <listitem>
    <simpara>Look into using <xref linkend="dlv"><citetitle>DLV</citetitle></xref>, but be aware that this is only an interim solution.</simpara>
   </listitem>
  </orderedlist>

  <para>The long term solution is still to have your parent zone work with you.
  If your registrar does not support DNSSEC, maybe it's time to switch to one
  that does.</para>

 </section>
 -->
</section>
