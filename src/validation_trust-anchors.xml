<section id="trust-anchors">
 <title>Trust Anchors</title>
 <para>A trust anchor is a key that is placed into a validating resolver so
 that the validator can verify the results for a given request back to a known
 or trusted public key (the trust anchor). A validating resolver must have at
 least one trust anchor installed in order to perform DNSSEC validation.</para>


 <!-- ====== How Trust Anchors are Used ====== -->
 <section id="how-trust-anchors-are-used">
  <title>How Trust Anchors are Used</title>
  <para>In the section <xref
  linkend="how-does-dnssec-change-dns-lookup-revisited"/>, we walked through
  the DNSSEC lookup process (12 steps), and at the end of the 12 steps, a
  critical comparison happens: the key received from the remote server, and the
  key we have on file are compared to see if we trust it. The key we have on
  file is called a trust anchor, sometimes also known as a trust key, trust
  point, or secure entry point.</para>

  <para>The 12-step lookup process describes the DNSSEC lookup in the ideal
  world where every single domain name is signed and properly delegated, each
  validating resolver only needs to have one trust anchor, and that is the
  root's public key. But there is no restriction that the validating resolver
  must only have one trust anchor. In fact, in the early stages of DNSSEC
  adoption, it was not unusual for a validating resolver to have more than one
  trust anchor.</para>

  <para>For instance, before the root zone was signed (July 2010),
  some validating resolvers that wish to validate domain names in the
  <code>.gov</code> zone needed to obtain and install the key for
  <code>.gov</code>. A sample lookup process for <code>www.fbi.gov</code> would
  thus be only 8 steps rather than 12 steps that look like this:</para>

  <para>
   <figure>
    <title>DNSSEC Validation with .gov Trust Anchor</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="../img/dnssec-8-steps.png" width="80%" scalefit="1"/>
     </imageobject>
    </mediaobject>
   </figure>

   <orderedlist>

    <!-- #1 -->
    <listitem>
     <simpara>The validating resolver queries <code>fbi.gov</code> name server for
     the A record of <code>www.fbi.gov</code>.</simpara>
    </listitem>

    <!-- #2 -->
    <listitem>
     <simpara>The FBI's name server responds with the answer and its RRSIG.</simpara>
    </listitem>

    <!-- #3 -->
    <listitem>
     <simpara>The validating resolver queries FBI's name server for its
     DNSKEY.</simpara>
    </listitem>

    <!-- #4 -->
    <listitem>
     <simpara>The FBI's name server responds with the DNSKEY and its RRSIG.</simpara>
    </listitem>

    <!-- #5 -->
    <listitem>
     <simpara>The validating resolver queries a <code>.gov</code> name server for the DS
     record of <code>fbi.gov</code>.</simpara>
    </listitem>

    <!-- #6 -->
    <listitem>
     <simpara>The <code>.gov</code> name server responds with the DS record and the associated RRSIG
     for <code>fbi.gov</code>.</simpara>
    </listitem>
    
    <!-- #7 -->
    <listitem>
     <simpara>The validating resolver queries <code>.gov</code> name server for its
     DNSKEY.</simpara>
    </listitem>
    
    <!-- #8 -->
    <listitem>
     <simpara>The <code>.gov</code> name server responds with its DNSKEY and the associated
     RRSIG.</simpara>
    </listitem>
   </orderedlist>
  </para> 

  <para>This all looks very similar, except it's shorter than the 12-steps that
  we saw earlier. Once the validating resolver receives the DNSKEY file in #8,
  it recognizes that this is the manually configured trusted key (trust
  anchor), and never goes to the root name servers to ask for the DS record for
  <code>.gov</code>, or ask the root name servers for its DNSKEY.</para>

  <para>In fact, whenever the validating resolver receives a DNSKEY, it checks
  to see if this is a configured trusted key, to decide whether or not it needs
  to continue chasing down the validation chain.</para>
 </section>


 <!-- ====== Trust Anchors and Managed Keys ====== -->
 <section id="trusted-keys-and-managed-keys">
  <title>Trusted Keys and Managed Keys</title>
  <para>So, as the resolver is validating, we must have at least one key (trust
  anchor) configured. How did it get here, and how do we maintain it?</para>

  <para>If you followed the recommendation in <xref
  linkend="easy-start-guide-for-recursive-servers"/>, by setting
  <varname>dnssec-validation</varname> to <replaceable>auto</replaceable>, then
  there is nothing you need to do. BIND already includes a copy of the root key (in the
  file <filename>bind.keys</filename>), and will automatically update it when
  the root key changes.<footnote>
  <para>The root zone was signed in July 2010 and, as at the time of writing, the
  key has been changed once, in October 2018.  The intention going forwards is to
  roll the key once every five years.</para>
  </footnote>
  It looks something like this:</para>

  <screen>trust-anchors {
        # This key (20326) was published in the root zone in 2017.
        . initial-key 257 3 8 "AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3
                +/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kv
                ArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF
                0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+e
                oZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLYA4/ilBmSVIzuDWfd
                RUfhHdY6+cn8HFRm+2hM8AnXGXws9555KrUB5qihylGa8subX2Nn6UwN
                R1AkUTV74bU=";
};</screen>

  <para>You could, of course, decide to manage this key on your own by hand.
  First, you'll need to make sure that your
  <varname>dnssec-validation</varname> is set to <replaceable>yes</replaceable>
  rather than <replaceable>auto</replaceable>: </para>

  <screen>options {
    dnssec-validation yes;
};</screen>

  <para>Then, download the root key manually from a trustworthy source, such as
  <ulink url="https://www.isc.org/bind-keys"/>. Finally, take the root key you
  manually downloaded, and put it into a <varname>trust-anchors</varname>
  statement as shown below:</para>

  <screen>trust-anchors {
        # This key (20326) was published in the root zone in 2017.
        . static-key 257 3 8 "AwEAAaz/tAm8yTn4Mfeh5eyI96WSVexTBAvkMgJzkKTOiW1vkIbzxeF3
                +/4RgWOq7HrxRixHlFlExOLAJr5emLvN7SWXgnLh4+B5xQlNVz8Og8kv
                ArMtNROxVQuCaSnIDdD5LKyWbRd2n9WGe2R8PzgCmr3EgVLrjyBxWezF
                0jLHwVN8efS3rCj/EWgvIWgb9tarpVUDK/b58Da+sqqls3eNbuv7pr+e
                oZG+SrDK6nWeL3c6H5Apxz7LjVc1uTIdsIXxuOLYA4/ilBmSVIzuDWfd
                RUfhHdY6+cn8HFRm+2hM8AnXGXws9555KrUB5qihylGa8subX2Nn6UwN
                R1AkUTV74bU=";
};</screen>

  <para>While this <code>trust-anchors</code> statement and the one in the
  <filename>bind.keys</filename> file appear similar, the definition of the key in
  <filename>bind.keys</filename>
  has the <code>initial-key</code> modifier, whereas in the statement in the
  configuration file, that
  is replaced by <code>static-key</code>.  There is an important difference
  between the two: a key defined with <code>static-key</code> is always trusted
  until it is deleted from the configuration file.  With the
  <code>initial-key</code> modified, keys are only trusted once: for as long as
  it takes to load the managed key database and start the key maintenance
  process.  Thereafter BIND will use the managed keys database
  (<filename>managed-keys.bind.jnl</filename>) as the source of key information.</para>

  <warning>
  <simpara>Remember, if you choose to manage the keys on your own, whenever the
  key changes (which, for most zones, will happen on a periodic basis), the
  configuration needs to be updated manually. Failing to do so
  will result in breaking nearly all DNS queries for the sub domain of the key.
  So if you are manually managing <code>.gov</code>, all domain names in the
  <code>.gov</code> space may become unresolvable; if you are manually managing
  the root key, you could break all DNS requests made to your recursive name
  server.</simpara>
  </warning>

  <para>Explicit management of keys was common in the early days of DNSSEC, when
  neither the root zone nor many top-level domains were signed.  Since then,
  <ulink url="https://stats.research.icann.org/dns/tld_report/">over 90%</ulink>
  of the top-level domains have been signed, including all the largest ones.
  Unless you have a particular need to manage keys yourself, it is best to use
  the BIND defaults and let it manage the root key.</para>

<!-- TODO: better explain how RFC 5011 automatic trust
anchor maintenance differs from static trusted-keys. Explain what
the key maintenance process does. -->

 </section>
</section>

