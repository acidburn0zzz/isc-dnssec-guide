<section id="advanced-discussions-key-generation">
 <title>DNSSEC Keys</title>

  <!-- === Types of Keys === -->
  <section id="types-of-keys">
   <title>Types of Keys</title>
   <para>The title of this section is a bit of a misnomer - although 
   DNSSEC documentation talks about three types of keys, they are all
   the same thing.  The types of keys are:</para>

    <variablelist>
     <varlistentry>
      <term>Zone Signing Key (ZSK)</term>
     <listitem>
      <simpara>This is the key used to sign the zone.  It
      usually signs all records in the zone apart from the DNSKEY RRset,
      although some nameserver implementaations use it to sign that
      as well.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Key Signing Key (KSK)</term>
     <listitem>
      <simpara>This is the key used to sign the DNSKEY RRset and is
      the key used to link the parent and child zones.  The parent
      zone stores a digest of the KSK.  When a resolver is verifying
      the chain of trust it checks to see that the DS record in the
      parent (which holds the digest of a key) matches a key in the
      DNSKEY RRset, and that it is able to use that key to verify the
      DNSKEY RRset.  If it is able to do that, the resolver knows that
      it can trust the DNSKEY records, and so can use one of them to
      validate the other records in the zone.</simpara>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>Combined Signing Key (CSK)</term>
     <listitem>
      <simpara>A CSK combines the functionality of a ZSK and a KSK.
      Instead of having one key for signing the zone and one for linking
      the parent and child zones, A CSK is a single key that serves both
      purposes.</simpara>
     </listitem>
    </varlistentry>
   </variablelist>

   <para>It is important to realise the terms ZSK, KSK and CSK describe
   how the keys are used -  all these keys are represented by DNSKEY
   records. The following examples are the DNSKEY records from a zone
   signed with a KSK and ZSK:</para>

<para><screen>$ <userinput>dig @192.168.1.12 example.com DNSKEY</userinput>

; &lt;&lt;&gt;&gt; DiG 9.16.0 &lt;&lt;&gt;&gt; @192.168.1.12 example.com dnskey +multiline
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 54989
;; flags: qr aa rd; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: 5258d7ed09db0d76010000005ea1cc8c672d8db27a464e37 (good)
;; QUESTION SECTION:
;example.com.		IN DNSKEY

;; ANSWER SECTION:
example.com.		60 IN DNSKEY <userinput>256</userinput> 3 13 (
				tAeXLtIQ3aVDqqS/1UVRt9AE6/nzfoAuaT1Vy4dYl2CK
				pLNcUJxME1Z//pnGXY+HqDU7Gr5HkJY8V0W3r5fzlw==
				) ; ZSK; alg = ECDSAP256SHA256 ; key id = 63722
example.com.		60 IN DNSKEY <userinput>257</userinput> 3 13 (
				cxkNegsgubBPXSra5ug2P8rWy63B8jTnS4n0IYSsD9eW
				VhiyQDmdgevKUhfG3SE1wbLChjJc2FAbvSZ1qk03Nw==
				) ; KSK; alg = ECDSAP256SHA256 ; key id = 42933</screen></para>


   <para>... and a zone signed with just a CSK:</para>

<para><screen>$ <userinput>dig @192.168.1.13 example.com DNSKEY</userinput>

; &lt;&lt;&gt;&gt; DiG 9.16.0 &lt;&lt;&gt;&gt; @192.168.1.13 example.com dnskey +multiline
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 22628
;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: bf19ee914b5df46e010000005ea1cd02b66c06885d274647 (good)
;; QUESTION SECTION:
;example.com.		IN DNSKEY

;; ANSWER SECTION:
example.com.		60 IN DNSKEY <userinput>257</userinput> 3 13 (
				p0XM6AJ68qid2vtOdyGaeH1jnrdk2GhZeVvGzXfP/PNa
				71wGtzR6jdUrTbXo5Z1W5QeeJF4dls4lh4z7DByF5Q==
				) ; KSK; alg = ECDSAP256SHA256 ; key id = 1231</screen></para>

   <para>The only visible differece between the records (apart from the
   key data itself) are is the value of the flags fields (highlighted);
   this is 256 for a ZSK and 257 for a KSK or CSK.  Even then, the flags
   field is only a hint to the software using them as to the role of the
   key: zones can be signed by any key.  The fact that a CSK and KSK
   both have the same flags emphasises this.  A KSK usually only signs
   the DNSKEYs in a zone whereas a CSK is used to sign all records in
   the zone.</para>

   <para>The original idea of separating the function of the key into
   a KSK and ZSK was operational.  With a single key, changing it for any
   reason is an expensive operation, as it requires interaction with
   the parent zone (e.g. uploading the key to the parent may require
   manual interaction with the organization running that zone). By
   splitting it, interaction with the parent is required only if the
   KSK is changed; the ZSK can be changed as often as required without
   involving them.</para>

   <para>The split also allows the keys to be of different lengths. So
   the ZSK, which is used to sign the record in the zone can be of a
   (relatively) short length, lowering the load on the server.  The
   KSK, which is used only infrequently, can be of a much longer length.
   The relatively infrequent use also allows the private part of the
   key to be stored in a way that is more secure but may require more
   overhead to access, e.g. on an HSM (see
   <ulink linkend="private-key-storage"/>).</para>

   <para>In the early days of DNSSEC, the idea of splitting the key went
   more or less unchallenged.  However, with the advent of more powerful
   computers and the introduction of signalling methods between the
   parent and child zones (see WHERE??), the advantages of a ZSK/KSK
   split are less clear and, for many zones, a single key is all that is
   required. </para>

   <para>As with many questions relatied to the choice of DNSSEC policy,
   the answer is not clear and depends on your circumstances.</para>
  </section>

 <!-- === Which Algorithm? === -->
 <section id="which-algorithm">
  <title>Which Algorithm?</title>

  <para>There are at three algorithm choices for DNSSEC as of this
  writing (late 2020): </para>

  <itemizedlist>
   <listitem>
    <simpara>RSA</simpara>
   </listitem>
   <listitem>
    <simpara>Elliptic Curve DSA (ECDSA)</simpara>
   </listitem>
   <listitem>
    <simpara>Edwards Curve Digital Security Algorithm (EdDSA)</simpara>
   </listitem>
  </itemizedlist>

  <para>All are supported in BIND, but only RSA and ECDSA (specifically
  RSASHA256 and ECDSAP256SHA256) are mandatory to implement in DNSSEC.
  However, RSA is a little long in the tooth, and ECDSA/EdDSA are emerging as
  the next new cryptographic standards. In fact, the US federal government
  recommended to stop using RSA altogether by September 2015, and migrate to
  using ECDSA or similar algorithms.</para>

  <para>So for now, use ECDSAP256SHA256 but keep abreast of developments
  in this area.  For details about rolling over DNSKEYs
  to a new algorithm, see <xref
  linkend="advanced-discussions-DNSKEY-algorithm-rollovers" />.</para>

 </section>


 <!-- === Key Sizes === -->
 <section id="key-sizes">
  <title>Key Sizes</title>
  <para>
  If using RSA keys, the choice of key sizes is a classic issue of finding the balance
  between performance and security. The larger the key size, the longer it
  takes for an attacker to crack the key; but larger keys also means more
  resources are needed both when generating signatures (authoritative servers)
  and verifying signatures (recursive servers).</para>

  <para>Of the two sets of keys, ZSK is used much more frequently. Whenever
  zone data changes, or when signatures expire, ZSK is used, so performance
  certainly is of a bigger concern. As for KSK, it is used less frequently, so
  performance is less of a factor, but its impact is bigger because of its role
  in signing other keys.</para>

  <para>In the early versions of this guide, the following key length
  were chosen for each set, with the recommendation that they be rotated
  more frequently for better security:

   <itemizedlist>
    <listitem>
     <simpara><emphasis>ZSK</emphasis>:
     RSA 1024 bits, rollover every year</simpara>
    </listitem>
    <listitem>
     <simpara><emphasis>KSK</emphasis>:
     RSA 2048 bits, rollover every five years</simpara>
    </listitem>
   </itemizedlist>
  </para>

  <para>These should be the minimum RSA key sizes one should choose.  At the time
  of writing (late 2020) the root zone and many TLDs are already using 2048 bit
  ZSKs.  If you choose to implement larger key sizes, keep in mind that larger
  key size results in larger DNS responses, and this may mean more load on
  network resources. Depending on network configuration, end users may even
  experience resolution failures due to the increased response sizes, as we
  have discussed in <xref linkend="whats-edns0-all-about" />.</para>

  <para>ECDSA key sizes can be much smaller for the same level of security,
  e.g. an ECDSA key length of 224 bits provides the same level of security as
  a 2048 RSA key.  Currently BIND sets a key size of 256 for all ECDSA keys.</para>
 </section>


 <section id="advanced-discussions-key-storage">
  <title>Key Storage</title>
 
  <!-- === Public Key Storage === -->
  <section id="public-key-storage">
   <title>Public Key Storage</title>
   <para>The beauty of a public key cryptography system is that the public key
   portion can and should be distributed to as many people as possible. As the
   administrator, you may want to keep the public keys on an easily accessible
   file system for operational ease, but there is no need to securely store
   them, since both ZSK and KSK public keys are published in the zone data as
   DNSKEY resource records.</para>
 
   <para>Additionally, a hash of the KSK public key is also uploaded to the
   parent zone (see <xref linkend="working-with-parent-zone" /> for more
   details), and is published by the parent zone as DS records.</para>
 
  </section>
 
 
  <!-- === Private Key Storage === -->
  <section id="private-key-storage">
   <title>Private Key Storage</title>
   <para>Ideally, private keys should be stored offline, in secure devices such
   as a smart card. Operationally, however, this creates certain challenges,
   since we need the private key to create RRSIG resource records, and it would
   be a hassle to bring the private key out of storage every time the zone file
   changes or when signatures expire.</para>
 
   <para>A common approach to strike the balance between security and
   practicality is to have two sets of keys, a ZSK set, and a KSK set. ZSK
   private key is used to sign zone data, and can be kept online for ease of
   use; KSK private key is used to sign just the DNSKEY (the ZSK), it is used
   less frequently, and can be stored in a much more secure and restricted
   fashion.</para>
 
 <!-- TODO: write about offline key storage doesn't work with
 automatic zone signing, and refer to dnssec-signzone manual. -->
 
   <para>For example, a KSK private key stored on a USB flash drive that is kept
   in a fireproof safe, only brought online once a year to sign a new pair of
   ZSK, combined with a ZSK private key stored on the network file-system
   available for routine use, maybe be a good balance between operational
   flexibility and security.</para>
 
   <para>And if you need to change your keys, please see <xref
   linkend="key-rollovers" />.</para>
  </section>
 
 
  <!-- === HSMs === -->
  <section id="hardware-security-modules">
   <title>Hardware Security Modules (HSM)</title>
   <para>A Hardware Security Module (HSM) comes in different shapes and sizes,
   but as the name indicates, it's a physical device or devices, usually with
   some or all of the following features:
 
    <itemizedlist>
     <listitem>
      <simpara>Tamper-resistant key storage</simpara>
     </listitem>
     <listitem>
      <simpara>Strong random number generation</simpara>
     </listitem>
     <listitem>
      <simpara>Hardware for faster cryptographic operations</simpara>
     </listitem>
    </itemizedlist>
   </para>
 
   <para>Most organizations do not incorporate HSMs into their security
   practices due to cost and the added operational complexity.</para>
 
   <para>BIND supports PKCS #11 (Public Key Cryptography Standard #11) for
   communication with HSMs and other cryptographic support devices. For more
   information on how to configure BIND to work with HSMs, please refer to the
   <ulink url="http://www.isc.org/downloads/bind/doc/">BIND 9 Administrator
   Reference Manual</ulink>.</para>
 
  </section>
 </section>

</section>
