<section id="other-topics">
 <title>Other Topics</title>

 <!-- === DNSSEC and Dynamic Updates === -->
 <section id="dnssec-and-dynamic-updates">
  <title>DNSSEC and Dynamic Updates</title>

  <para>Dynamic DNS (DDNS) actually is independent of DNSSEC. DDNS provides a
  mechanism other than editing the zone file or zone database, to edit DNS
  data. Most clients and DNS servers have the capability to handle dynamic
  updates, and DDNS can also be integrated as part of your DHCP
  environment.</para>

  <para>When you have both DNSSEC and dynamic updates in your environment,
  updating zone data works the same way as with traditional (insecure) DNS: you
  can use <command>rndc freeze</command> before editing the zone file, and
  <command>rndc thaw</command> when you have finished editing, or you could use
  the command <command>nsupdate</command> to add, edit, or remove records like
  this:
   <screen>$ <userinput>nsupdate</userinput>
> server 192.168.1.13
> update add xyz.example.com. 300 IN A 1.1.1.1
> send
> quit</screen></para>

  <para>The examples provided in this guide will make <command>named</command>
  automatically re-sign the zone whenever its content has changed. If you
  decide to sign your own zone file manually, you will need to remember to
  executed the <command>dnssec-signzone</command> whenever your zone file has
  been updated.</para>

  <para>As far as system resources and performance is concerned, be mindful
  that when you have a DNSSEC zone that changes frequently, every time the zone
  changes, your system is executing a series of cryptographic operations to
  (re)generate signatures and NSEC or NSEC3 records.</para>
 </section>

 <!-- === DNSSEC and Inline Signing ===
 <section id="dnssec-and-inline-signing">
  <title>DNSSEC and Inline Signing</title>

  <para>ISC introduces the "inline-signing" option with the release of BIND
  9.9, which allows <command>named</command> to sign zones completely
  transparently. <command>named</command> does this by automatically creating
  an internal version of the zone that is signed on the fly, and only the
  signed version of the zone is presented to queries. The unsigned version of
  the zone file is untouched on the file system, but not served.</para>

  <para>This features simplifies DNSSEC deployment, below are two common
  scenarios of how this feature can be used:

   <orderedlist>
    <listitem>
     <simpara><emphasis>You administer the primary server, with zone
     transfers to other secondary servers</emphasis>: This is what most
     examples in this guide describes, you have control over the primary
     server, you you can follow the instruction in <xref
     linkend="easy-start-guide-for-authoritative-servers" /> to generate
     key pairs and modify <command>named.conf</command>. A signed version
     of the zone is either generated on the fly by inline-signing, and
     zone transfers will take care of synchronizing the signed zone data
     to all secondary name servers.</simpara>
    </listitem> 

    <listitem>
     <simpara><emphasis>You cannot easily modify the primary sever
     configuration, but still would like all secondary servers to get DNSSEC
     zones</emphasis>: you can setup a "middle box" that all secondary name
     servers transfer data from, and your middle box gets its zone from
     the primary server. You do not need to modify the primary name server
     configuration at all, on the middle box, set it up to have inline
     signing enabled, whenever your middle box receives zone transfer
     (unsigned) from the primary server, a signed version is generated on
     the fly, and this is the version that will be transferred out to the
     other secondary name servers.</simpara>
    </listitem>
   </orderedlist>
  </para>

  <para>For more details and configuration examples on Inline Signing,
  please see <xref linkend="recipes-inline-signing" />.</para>
 </section>

Commented out as this is covered elsewhere.
-->

 <!-- === DNSSEC on Private Networks === -->
 <section id="dnssec-on-private-networks">
  <title>DNSSEC on Private Networks</title>

  <para>Before we discuss DNSSEC on private networks, let's clarify what
  we mean by private networks. In this section, private networks really
  refers to a private or internal DNS view. Most DNS products offer the
  ability to have different version of DNS answers, depending on the
  origin of the query. This feature is often called DNS views or split
  DNS, and is most commonly implemented as an "internal" versus an
  "external" setup.</para>

  <para>For instance, your organization may have a version of
  <code>example.com</code> that is offered to the world, and its names
  most likely resolves to publicly reachable IP addresses. You may also
  have an internal version of <code>example.com</code> that is only
  accessible when you are on the company's private networks or via a VPN
  connection. These private networks typical fall under 10.0.0.0/8,
  172.16.0.0.0/12, or 192.168.0.0.0/16 for IPv4.</para>

  <para>So what if you want to offer DNSSEC for your internal version of
  <code>example.com</code>? This can be done: the golden rule is to use the
  same key for both the internal and external versions of the zones. This
  will get rid of problems that will occur when machines (e.g. laptops)
  move between accessing the internal and external zones (when it is
  possible that that may have cached records from the wrong zone).
  </para>

<!--
  <para>So what if you want to offer DNSSEC for your internal version of
  <code>example.com</code>? This is actually a more involving question,
  and we can only cover this topic briefly in this document.</para>

  <para>Deploying DNSSEC in this context is possible.  Because
  private networks are usually trusted, there may be less need to
  worry about someone hijacking your DNS traffic. This is commonly
  known as the "last mile" in DNS delivery. If you wish to deploy
  DNSSEC on your private networks, here are some scenarios to
  consider:</para>
  
  <orderedlist>
   <listitem>
    <para>If your name server is configured as both the validating resolver and
    the internal authoritative server, the answers returned to your clients
    will not be validated at all. This is because the answer is coming directly
    from the authoritative server, thus the Authoritative Answer
    (<code>aa</code>) bit is set and, by definition, it is not validated.  What
    this means is, to a regular client making the query, the secure
    authoritative answer looks exactly the same as the insecure authoritative
    answer.</para>

    <para>It <emphasis>is</emphasis> technically possible to
    achieve validation and authoritative serving within a single
    instance of BIND by using separate views for each, however the
    details of doing so are outside the scope of this document.
    There is a good example of this technique for serving a locally
    validatable copy of the root zone in Appendix A of <ulink
    url="https://tools.ietf.org/html/rfc7706"><citetitle>RFC
    7706</citetitle></ulink>.</para>

   </listitem>

   <listitem>
    <para>If you have two name server instances running, one acting
    as the validating resolver, and one acting as the internal
    authoritative name server, it is possible to actually validate
    answers, provided that you have installed the trust anchor(s)
    necessary for your internal zones on the validating resolver.
    In this setup, the client gets back the Authenticated Data
    (<code>ad</code>) bit when querying against the validating
    resolver.  If no trust anchors are installed, your validating
    resolver will go out to root, and attempt to validate internal
    answers against external authorities (and fail).</para>
   </listitem>

   <listitem>
    <para> DNSSEC is designed to protect the communication between
     the client and the nameserver, however there are few applications
     or stub resolver libraries that take advantage of this.  DNSSEC
     can help with last mile security in a managed environment, by
     deploying validating resolvers (such as BIND) on client
     machines.</para>
   </listitem>
  </orderedlist>

  <para>In addition, early efforts have concentrated on getting
    DNSSEC deployed between authoritative servers and recursive
    servers as that is a prerequisite for working DNSSEC between
    the recursive server and the application.  These efforts also
    provide a degree of protection for applications that are not
    DNSSEC-aware.</para>
-->
 </section>


 <!-- === Intro to DANE === -->
 <section id="introduction-to-dane">
  <title>Introduction to DANE</title>

  <para>With your DNS infrastructure now secured with DNSSEC, information can
  now be stored in DNS and its integrity and authenticity can be proved. One of
  the new features that takes advantage of this is the DNS-Based Authentication
  of Named Entities, or DANE.  This improves security in a number of ways,
  e.g.</para>

  <itemizedlist>
   <listitem>
    <simpara>Store self-signed X.509 certificates, bypass having to pay a third party (such
    as a Certificate Authority) to sign the certificates
    (<ulink url="https://tools.ietf.org/html/rfc6698"><citetitle>RFC 6698</citetitle></ulink>).
    </simpara>
   </listitem>

   <listitem>
    <simpara>Improved security for clients connecting to mail servers
    (<ulink url="https://tools.ietf.org/html/rfc7672"><citetitle>RFC 7672</citetitle></ulink>).
    </simpara>
   </listitem>

   <listitem>
    <simpara>As a secure way of getting public PGP keys
    (<ulink url="https://tools.ietf.org/html/rfc7929"><citetitle>RFC 7929</citetitle></ulink>).
    </simpara>
   </listitem>
  </itemizedlist>

 </section>
</section>
