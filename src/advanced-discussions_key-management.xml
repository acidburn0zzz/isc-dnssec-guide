<section id="advanced-discussions-key-management">
 <title>Key Management</title>
 <para>Best practice for DNSSEC key management is to use different keys to sign
 zone data (ZSK) and DNSKEY data (KSK), as we've discussed in <xref
 linkend="do-i-need-zsk-and-ksk" />. Since these keys serve different
 functions, their timing and methods of rollovers are also different. In <xref
 linkend="signing-maintenance-tasks" />, we have broadly talked about how to
 perform a generic ZSK and KSK rollover. In this section, we will discuss two
 topics in more detail:
 <orderedlist>
  <listitem>
   <simpara>Different considerations and methods of key rollovers.</simpara>
  </listitem>
  <listitem>
   <simpara>Key meta data and management</simpara>
  </listitem>
 </orderedlist></para>

 <!-- === Key Rollovers === -->
 <section id="key-rollovers">
  <title>Key Rollovers</title>

  <para>Generally speaking, ZSKs should be rolled more frequently than KSKs. In
  <xref linkend="signing-maintenance-tasks" />, we described at a very high
  level how to roll the ZSK every year using key pre-publication (described below),
  and how to roll the KSK every five years using double DS (also described below).
  Here, we show some other methods of rolling keys. To see examples of key
  rolling, please refer to <xref linkend="recipes-rollovers" />. For (far)
  deeper discussions and considerations on the topic of key rolling, check out
  <ulink url="https://tools.ietf.org/html/rfc7583"><citetitle>RFC 7583</citetitle>
  </ulink>.</para>

  <!-- ====== ZSK Rollover ====== -->
  <section id="zsk-rollover-methods">
   <title>ZSK Rollover Methods</title>
   <para>Generally speaking, the ZSK is smaller in size (compared to the KSK) for
   performance, but smaller keys take less time to break, thus the ZSK should be
   changed, or rolled, more frequently. The ZSK can be rolled in one of the
   following two ways:
    <orderedlist>
     <!-- #1 Pre-publication -->
     <listitem>
      <simpara><emphasis>Pre-publication</emphasis>: Publish the new ZSK into zone
      data before it is actually used. Wait at least one TTL so the world's
      recursive servers know about both keys, then stop using the old key and
      generate new RRSIG using the new key. Wait at least another TTL, so the
      cached old key data is expunged from world's recursive servers, before
      removing the old key.</simpara>

      <simpara>The benefit of the Pre-publication approach is it does not
      dramatically increase the zone size, but the duration of the rollover is
      longer. If insufficient time has passed after the new ZSK is
      published, some resolvers may only have the old ZSK cached when the new
      RRSIG records are published, and validation may fail. This is the method
      that was described in <xref linkend="maintenance-tasks-zsk-rollover"
      /> and <xref linkend="recipes-zsk-rollover" /></simpara>
     </listitem>

     <!-- #2 Double Signature -->
     <listitem>
      <simpara><emphasis>Double Signature</emphasis>: Publish the new ZSK and new
      RRSIG, essentially double the size of the zone. Wait at least one TTL
      before removing the old ZSK and old RRSIG.</simpara>

      <simpara>The benefit of the Double Signature approach is that it is
      easier to understand and execute, but suffers from increased zone size
      (essentially double) during a rollover event.</simpara>
     </listitem>
    </orderedlist>
   </para>
  </section>


  <!-- ====== KSK Rollover ====== -->
  <section id="ksk-rollover-methods">
   <title>KSK Rollover Methods</title>
   <para>Rolling the KSK requires interaction with the parent zone, so
   operationally this may be more complex than rolling ZSKs. There are three
   methods of rolling the KSK:

    <orderedlist>
     <!-- #1 Double-DS -->
     <listitem>
      <simpara><emphasis>Double-DS</emphasis>: the new DS record is published.
      After waiting for this change to propagate into caches, the KSK is
      changed.  After a further interval during which the old DNSKEY RRset
      expires from caches, the old DS record is removed.</simpara>

      <simpara>Double-DS is the reverse of Double-KSK: the new DS is published
      at the parent first, then the KSK at the child is updated, then remove
      the old DS at the parent. The benefit is that the size of the DNSKEY
      RRset is kept to a minimum, but interactions with the parent zone is
      increased to two events. This is the method that is described in <xref
      linkend="maintenance-tasks-ksk-rollover" /> and <xref
      linkend="recipes-ksk-rollover" />. </simpara>
     </listitem>

     <!-- #2 Double-KSK -->
     <listitem>
      <simpara><emphasis>Double-KSK</emphasis>: the new KSK is added to the
      DNSKEY RRset which is then signed with both the old and new key.  After
      waiting for the old RRset to expire from caches, the DS record in the
      parent zone is changed.  After waiting a further interval for this change
      to be reflected in caches, the old key is removed from the
      RRset.</simpara>

      <simpara>Basically, the new KSK is added first at the child zone and
      being used to sign DNSKEY, then the DS record is changed, followed by the
      removal of the old KSK. Double-KSK limits the interaction with the parent
      zone to a minim, but for the duration of the rollover, the size of the
      DNSKEY RRset is increased.</simpara>
     </listitem>
  
     <!-- #3 Double-RRset -->
     <listitem>
      <simpara><emphasis>Double-RRset</emphasis>: the new KSK is added to the
      DNSKEY RRset which is then signed with both the old and new key, and the
      new DS record added to the parent zone.  After waiting a suitable
      interval for the old DS and DNSKEY RRsets to expire from caches, the old
      DNSKEY and DS record are removed.</simpara>

      <simpara>Double-RRset is the fastest way to roll the KSK (shortest
      rollover time), but has the drawbacks of both of the other methods: a
      larger DNSKEY RRset and two interactions with the parent.</simpara>
     </listitem>
    </orderedlist>
   </para>
  </section>
 </section>


 <!-- === Key Management and Metadata === -->
 <section id="keymanagement-and-metadata">
  <title>Key Management and Metadata</title>

  <para>In <xref linkend="signing-auto-dnssec-explained" />, we alluded
  that <varname>auto-dnssec</varname> is doing a lot of automation for us
  so we don't have to, and we've also alluded to something called the key
  timing metadata. In fact, if you looked at your key file, it likely
  already has a section near the top that looks like this:</para>
  
<screen>; Publish: 20141120094612 (Thu Nov 20 17:46:12 2014)
; Activate: 20141120094612 (Thu Nov 20 17:46:12 2014)</screen>

  <para>These are only two of the five metadata fields of a key. Below is
  a complete list of each of the metadata fields, and how it affects your
  key's behavior:

   <orderedlist>
    <listitem>
     <simpara><emphasis>Publish</emphasis>: Sets the date on which a key is
     to be published to the zone. After that date, the key will be included
     in the zone but will not be used to sign it (yet). This is notifying
     validating resolvers that we are about to introduce a new key. By
     default, if not specified during creation time, this is set to the
     current time, meaning the key will be published as soon as
     <command>named</command> picks it up.</simpara>
    </listitem>
    <listitem>
     <simpara><emphasis>Activate</emphasis>: Sets the date on which the key
     is to be activated. After that date, the key will be included in the
     zone and used to sign it. By default, if not specified during creation
     time, this is set to the current time, meaning the key will be used to
     sign data as soon as <command>named</command> picks it up.</simpara>
    </listitem>
    <listitem>
     <simpara><emphasis>Revoke:</emphasis> Sets the date on which the key
     is to be revoked. After that date, the key will be flagged as revoked.
     It will be included in the zone and will be used to sign it. This is
     used to notify validating resolvers that this key is about to be
     removed or retired from the zone.</simpara>
    </listitem>
    <listitem>
     <simpara><emphasis>Inactive</emphasis>: Sets the date on which the key
     is to become inactive. After that date, the key will still be included
     in the zone, but it will not be used to sign it. This sets the
     "expiration" or "retire" date for a key.</simpara>
    </listitem>
    <listitem>
     <simpara><emphasis>Delete</emphasis>: Sets the date on which the key
     is to be deleted. After that date, the key will no longer be included
     in the zone, but it continues to exist on the file system or key
     repository.</simpara>
    </listitem>
   </orderedlist>
  </para>

  <para>You can set these metadata fields on a key pair as you've seen in
  <xref linkend="maintenance-tasks-zsk-rollover" /> using commands such as
  <command>dnssec-keygen</command> or
  <command>dnssec-settime</command>.</para>

   <table>
    <title>Key Metadata Comparison</title>
    <tgroup cols='4' align='left' colsep='0' rowsep='0'>
     <thead>
      <row>
       <entry>Metadata</entry>
       <entry>Included in Zone File?</entry>
       <entry>Used to Sign Data?</entry>
       <entry>Purpose</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>Publish</entry>
       <entry>Yes</entry>
       <entry>No</entry>
       <entry>Introducing a key soon to be active</entry>
      </row>
      <row>
       <entry>Activate</entry>
       <entry>Yes</entry>
       <entry>Yes</entry>
       <entry>Activation date for new key</entry>  
      </row>
      <row>
       <entry>Revoke</entry>
       <entry>Yes</entry>
       <entry>Yes</entry>
       <entry>Notifying a key soon to be retired</entry>
      </row>
      <row>
       <entry>Inactive</entry>
       <entry>Yes</entry>
       <entry>No</entry>
       <entry>Inactivate or retire a key</entry>
      </row>
      <row>
       <entry>Delete</entry>
       <entry>No</entry>
       <entry>No</entry>
       <entry>Deletion or removal of key from zone</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
</section>


 <!-- === How Long Do I Wait Before Deleting Old Data? === -->
 <section id="how-long-before-deleting-old-data">
  <title>How Long Do I Wait Before Deleting Old Data?</title>

  <para>If you have followed the examples described in <xref
  linkend="easy-start-guide-for-authoritative-servers" /> and <xref
  linkend="signing-maintenance-tasks" />, old keys and old signatures are
  automatically removed from the zone.</para>

  <para>However, it is still good to discuss why bother waiting a period
  of time before removing any old data, be it DNSKEY or RRSIG. The goal
  here is to not "orphan" anyone out there who may be getting a cached
  answer, and the information to verify that cached answer doesn't exist
  anymore. For example, if you chose to pre-publish your ZSK, but did not
  wait long enough before removing the old ZSK, you're running with the
  risk that there may be users out there receiving the old RRSIG out of
  cache, but they are unable to verify the cached old RRSIG because the
  old ZSK has already been removed. To these users, the domain names would
  fail validation, until the cached RRSIG entries expire, and their
  validating resolver retrieves the new RRSIG signed by the new
  ZSK.</para>

  <para>In <xref linkend="signing-maintenance-tasks" />, we recommended
  using a very generic and easy to remember 30 days as the amount of time
  to wait, partly because 30 days is also the default validity time for
  RRSIG. If you decide to manage your own zone signing and record
  removing, you should wait at least the duration of your old record's TTL
  before attempting to removing it from the zone. It is probably better to
  err on the safe side and leave the old data in the zone a little
  longer.</para>

  <note>
  <para>One of the worst things to happen during a rollover is to "orphan" old
  keys, by deleting it too soon from the zone. This will result in the world's
  recursive servers come asking "hey, do you have the key(s) for these older
  signatures?" and not get an answer to satisfy their needs. The recursive
  servers would have to fail the validation, and the users may think you zone
  has been compromised because the keys and signatures to match up. This is why
  it is a good idea to wait a period of time in-between each phase of the key
  rollover, to ensure that not only new information has propogated to the
  world, but also that old information that was previously published to the
  world have expired from whoever has been caching them. This is why in this
  document we have chosen a very conservative period of 30 days. If you have
  unusually long TTL or signature expirations, it may be wise to change the
  rollover schedule accordingly.</para>
  </note>

 </section>


 <!-- === Emergency Key Rollovers === -->
 <section id="advanced-discussions-emergency-rollovers">
  <title>Emergency Key Rollovers</title>

  <para>Keys are generally rolled at a regular schedule (that is, if you choose
  to roll them at all). But sometimes, you may have to rollover keys
  out-of-schedule due to a security incident. The aim of an emergency rollover
  is re-sign the zone with a new key as soon as possible, because when a key is
  suspected of being compromised, the malicious attacker (or anyone who has
  access to the key) could impersonate you, and trick other validating
  resolvers into believing that they are receiving authentic, validated
  answers.</para>

  <para>During an emergency rollover, you would follow the same operational
  procedures as described in <xref linkend="recipes-rollovers" />, with the
  added task of reducing the TTL of current active (possibly compromised)
  DNSKEY RRset, in attempt to phase out the compromised key faster before the
  new key takes effect. The time frame should be significantly reduced from the
  30-days-apart example, since you probably don't want to wait up to 60 days
  for the compromised key to be removed from your zone.</para>

  <para>Another method is to always carry a spare key with you at all times.
  You could always have a second key (pre)published (and hopefully this one was
  not compromised the same time as the first key), so if the active key is
  compromised, you could save yourself some time to immediately activate the
  spare key, and all the validating resolvers should already have this spare
  key cached, thus saving you some time.</para>

  <para>With KSK emergency rollover, you would have to also consider factors
  related to your parent zone, such as how quickly they can remove the old DS
  record and published the new ones.</para>

  <para>As usual, there is a lot more to consider when it comes to emergency
  key rollovers. For more in-depth considerations, please check out <ulink
  url="https://tools.ietf.org/html/rfc7583">
  <citetitle>RFC 7583</citetitle>
  </ulink>.</para>
 </section>

 <!-- === DNSKEY Algorithm Rollovers === -->
 <section id="advanced-discussions-DNSKEY-algorithm-rollovers">
  <title>DNSKEY Algorithm Rollovers</title>

  <para> From time to time new digital signature algorithms with
  improved security are introduced, and it may be desirable for
  administrators to roll over DNSKEYs to a new algorithm, e.g. from
  RSASHA1 (algorithm 5 or 7) to RSASHA256 (algorithm 8). The
  algorithm rollover must be done with care in a stepwise fashion
  to avoid breaking DNSSEC validation.  </para>

  <para> As with other DNSKEY rollovers, when the zone is of type
  master, an algorithm rollover can be accomplished using dynamic
  updates or automatic key rollovers. For zones of type slave, only
  automatic key rollovers are possible, but the
  <command>dnssec-settime</command> utility can be used to control
  the timing of such.  </para>

  <para> In any case the first step is to put DNSKEYs using the
  new algorithm in place. You must generate the <filename>K*</filename>
  files for the new algorithm and put them in the zone's key
  directory where <command>named</command> can access them. Take
  care to set appropriate ownership and permissions on the keys.
  If the <option>auto-dnssec</option> zone option is set to
  <option>maintain</option>, <command>named</command> will
  automatically sign the zone with the new keys based on their
  timing metadata when the <option>dnssec-loadkeys-interval</option>
  elapses or you issue the <command>rndc loadkeys</command> command.
  Otherwise for zones of type master, you can use
  <command>nsupdate</command> to add the new DNSKEYs to the zone.
  This will cause named to use them to sign the zone.  For zones
  of type slave, e.g. on a bump-in-the-wire inline signing server,
  <command>nsupdate</command> cannot be used.  </para>

  <para> Once the zone has been signed by the new DNSKEYs, you must
  inform the parent zone and any trust anchor repositories of the
  new KSKs, e.g. you might place DS records in the parent zone
  through your DNS registrar's website.  </para>

  <para> Before starting to remove the old algorithm from a zone,
  you must allow the maximum TTL on its DS records in the parent
  zone to expire. This will assure that any subsequent queries will
  retrieve the new DS records for the new algorithm. After the TTL
  has expired, you can remove the DS records for the old algorithm
  from the parent zone and any trust anchor repositories. You must
  then allow another maximum TTL interval to elapse so that the
  old DS records disappear from all resolver caches.  </para>

  <para> The next step is to remove the DNSKEYs using the old
  algorithm from your zone. Again this can be accomplished using
  <command>nsupdate</command> to delete the old DNSKEYs (master
  zones only) or by automatic key rollover when
  <option>auto-dnssec</option> is set to <option>maintain</option>.
  You can cause the automatic key rollover to take place immediately
  by using the <command>dnssec-settime</command> utility to set
  the <emphasis>Delete</emphasis> date on all keys to any time in
  the past. (See <command>dnssec-settime -D &lt;date/offset&gt;</command>
  option.) </para>

  <para> After adjusting the timing metadata, the <command>rndc
  loadkeys</command> command will cause <command>named</command>
  to remove the DNSKEYs and RRSIGs for the old algorithm from the
  zone. Note also that with the <command>nsupdate</command> method,
  removing the DNSKEYs also causes <command>named</command> to
  remove the associated RRSIGs automatically.  </para>

  <para> Once you have verified that the old DNSKEYs and RRSIGs
  have been removed from the zone, the final (optional) step is to
  remove the key files for the old algorithm from the key directory.
  </para>

 </section>
</section>
