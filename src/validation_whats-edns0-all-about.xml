<section id="whats-edns0-all-about">
 <title>What's EDNS All About (And Why Should I Care)?</title>

 <!-- ====== Overview ====== -->
 <section id="whats-edns0-all-about-overview">
  <title>EDNS Overview</title>

  <para>Traditional DNS responses are typically small in size (less than 512
  bytes) and fit nicely into a small UDP packet. The Extension
  mechanism for DNS (EDNS, or EDNS(0)) gives us a mechanism to send DNS
  data in larger packets over UDP. In order to support EDNS, both
  the DNS server and the network need to be properly prepared to support
  the larger packet size and multiple fragments.</para>

  <para>This is important for DNSSEC, since the <command>+do</command> bit that
  signals DNSSEC-awareness is carried within EDNS, and DNSSEC responses are larger
  than traditional DNS.  If DNS servers and network environment cannot
  support large UDP packets, it will cause retransmission over
  TCP, or the larger UDP responses will be discarded. Users will likely
  experience slow DNS resolution or unable to resolve certain names at
  all.</para>

  <para>Note that EDNS applies whether or not you are validating
  DNSSEC because BIND has DNSSEC enabled by default.</para>

  <para>Please see <xref linkend="network-requirements"/> for more
  information on what DNSSEC expects from the network environment.</para>

 </section>

 <!-- ====== EDNS on DNS Servers ====== -->
 <section id="edns-on-dns-servers">
  <title>EDNS on DNS Servers</title>
  <para>BIND has been shipped with EDNS enabled by default for over a
  decade, and the UDP packet size is set to a maximum of 4096 bytes.
  So as the DNS administrator, there should not be any re-configuration
  needed. You can use <command>dig</command> to verify that your server
  supports EDNS and the UDP packet size it is allowing as follows:

  <screen>$ <userinput>dig @10.53.0.1 www.isc.org. A +dnssec +multiline</userinput>

; &lt;&lt;&gt;&gt; DiG 9.16.0 &lt;&lt;&gt;&gt; @10.53.0.1 ftp.isc.org a +dnssec +multiline
; (1 server found)
;; global options: +cmd
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48742
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; <userinput>EDNS: version: 0, flags: do; udp: 4096</userinput>
; COOKIE: 29a9705c2160b08c010000005e67a4a102b9ae079c1b24c8 (good)
;; QUESTION SECTION:
;ftp.isc.org.		IN A

;; ANSWER SECTION:
ftp.isc.org.		300 IN A 149.20.1.49
ftp.isc.org.		300 IN RRSIG A 13 3 300 (
				20200401191851 20200302184340 27566 isc.org.
				e9Vkb6/6aHMQk/t23Im71ioiDUhB06sncsduoW9+Asl4
				L3TZtpLvZ5+zudTJC2coI4D/D9AXte1cD6FV6iS6PQ== )

;; Query time: 452 msec
;; SERVER: 10.53.0.1#53(10.53.0.1)
;; WHEN: Tue Mar 10 14:30:57 GMT 2020
;; MSG SIZE  rcvd: 187</screen>
  </para>

  <para>There is a helpful testing tool available (provided by DNS-OARC)
  that you can use to verify resolver behavior regarding EDNS support:
  <ulink url="https://www.dns-oarc.net/oarc/services/replysizetest/"
  /></para>

  <para>So you made sure your name servers have EDNS enabled. That should
  be the end of the story, right? Unfortunately, EDNS is a hop-by-hop
  extension to DNS. This means the use of EDNS is negotiated between each
  pair of hosts in a DNS resolution process, which in turn means if one of
  your upstream name servers (for instance, your ISP's recursive name
  server that you forward to) does not support EDNS, you may experience
  DNS lookup failures or be unable to perform DNSSEC validation.</para>

 </section>

 <!-- ====== Support for Large Packets on Network Equipment ====== -->
 <section id="support-for-large-packets-on-network-equipment">
  <title>Support for Large Packets on Network Equipment</title>
  <para>Okay, so both your recursive name server and your ISP's name
  servers support EDNS, we are all good here, right? Not so fast. As these
  large packets have to traverse through the network, the network
  infrastructure itself must allow them to pass.</para>

  <para>When data is physically transmitted over a network, it has to be
  broken down into chunks. The size of the data chunk is known as Maximum
  Transmission Units (MTU), and it can be different from network to
  network. IP fragmentation occurs when a large data packet needs to be
  broken down into smaller chunks so that each chunk is smaller than the
  MTU, and these smaller chunks need to be reassembled back into the large
  data packet. IP fragmentation is not necessarily a bad thing, it most
  likely occurs on your network today.</para>

  <para>Some network equipment, such as firewalls, may make assumptions about DNS
  traffic. One of these assumptions may be how large each DNS packet is. When a
  firewall sees a larger DNS packet than it expects, it either rejects the
  large packet or drops its fragments because the firewall thinks it's an
  attack. This configuration probably didn't cause problems in the past since
  traditional DNS packets are usually pretty small in size. However, with
  DNSSEC, these configurations need to be updated, since DNSSEC traffic
  regularly exceeds 1500 bytes (a common MTU value). If the configuration is
  not updated to support larger DNS packet size, it will often result in the
  larger packets being rejected, and to the end user it looks like the queries
  go un-answered.  Or in the case of fragmentation, only a part of the answer
  made it to the validating resolver, and your validating resolver may need to
  re-ask the question again and again, creating the appearance "DNS/network is
  really slow" for the end users.</para>

<!-- TODO: write about there is a strong argument for setting
max-udp-size to something smaller than the ethernet MTU on
authoritative servers, to reduce the problems caused by misconfigured
firewalls at remote sites.  -->

  <para>And while you're updating configuration on your network equipment, make
  sure TCP port 53 is also allowed for DNS traffic.</para>

 </section>

 <!-- ====== Wait... DNS uses TCP? ====== -->
 <section id="dns-uses-tcp">
  <title>Wait... DNS Uses TCP?</title>
  <para> Yes. DNS uses TCP port 53 as a fallback mechanism, when it cannot use
  UDP to transmit data. This has always been the case even long before DNSSEC
  arrived at the scene. Traditional DNS relies on TCP 53 for operations such as
  zone transfer. The use of DNSSEC, or DNS with IPv6 records such as AAAA,
  increases the chance that DNS data will be transmitted on TCP.</para>

  <para>Due to the increased packet size, DNSSEC may fall back to TCP more
  often then traditional (insecure) DNS. If your network is blocking or
  filtering TCP port 53 today, you may already experience instability with DNS
  resolution before deploying DNSSEC.</para>

 </section>
</section>
