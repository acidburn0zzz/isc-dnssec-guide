<section id="advanced-discussions-key-generation">
 <title>Key Generation</title>
 <!-- === Can I Use the Same Key for Multiple Zones? === -->
 <section id="same-key-for-multiple-zones">
  <title>Can I Use the Same Key Pair for Multiple Zones?</title>

  <para>Yes and no. Good security practice suggests that you should use unique
  key pairs for each zone, just like how you should have different passwords
  for your email account, social media login, and online banking credentials. On
  a technical level, this is completely feasible, but then multiple zones are 
  at risk when one key pair is compromised. If you have hundreds or thousands
  (or even hundreds of thousands) of zones to administer, a single key pair for
  all might be less error-prone to manage. You may choose to use the same
  approach to password management: use unique passwords for your bank accounts
  and shopping sites, but use a standard password for your not-very-important
  logins. So categorize your zones, high valued zones (or zones that have
  specific key rollover requirements) get their own key pairs, while other more
  "generic" zones can use a single key pair for easier management.</para>
  
 </section>


 <!-- === Do I need Separate ZSK and KSK? === -->
 <section id="do-i-need-zsk-and-ksk">
  <title>Do I Need Separate ZSK and KSK?</title>
  <para>No, it is not required that you create two separate sets of keys, but
  you should, for operational ease. The DNSSEC protocol itself does not require
  two classes of keys, but for operational practicality, having two classes of
  keys make the life of a typical DNS(SEC) administrator's life easier. One of
  the advantages of having separate ZSKs and KSKs is a better balance between
  security and ease of use: the KSK can be stored in a secure and less accessible
  area, while the ZSK is easily accessible for routine use. For more details and
  considerations on this topic, please refer to <ulink
  url="https://tools.ietf.org/html/rfc6781#section-3"> <citetitle> RFC 6781
  Section 3 </citetitle> </ulink>. </para>
  
  <para>Please refer to <xref linkend="zsk-ksk-comparison" /> for a comparison
  of how each of the keys are used.</para>

 </section>


 <!-- === Which Algorithm? === -->
 <section id="which-algorithm">
  <title>Which Algorithm?</title>

  <para>There are at least three algorithm choices for DNSSEC as of this
  writing (late 2016): </para>

  <itemizedlist>
   <listitem>
    <simpara>RSA</simpara>
   </listitem>
   <listitem>
    <simpara>Digital Signature Algorithm (DSA)</simpara>
   </listitem>
   <listitem>
    <simpara>Elliptic Curve DSA (ECDSA)</simpara>
   </listitem>
  </itemizedlist>

  <para>While all three are supported by BIND, RSA is the only one
  that is mandated to be implemented with DNSSEC and, at the time of
  writing, is the most widely supported algorithm by both name servers
  and clients. For the time being, RSA/SHA-256 is the algorithm of
  choice.</para>

  <para>However, RSA is a little long in the tooth, and ECDSA is emerging as
  the next new cryptographic standard. In fact, the US federal government
  recommended to stop using RSA altogether by September 2015, and migrate to
  using ECDSA or similar algorithms.</para>

  <para>So for now, use RSA, but keep your eyes on emerging new
  standards or requirements. For details about rolling over DNSKEYs
  to a new algorithm, see <xref
  linkend="advanced-discussions-DNSKEY-algorithm-rollovers" />.</para>

 </section>


 <!-- === Key Sizes === -->
 <section id="key-sizes">
  <title>Key Sizes</title>
  <para>The choice of key sizes is a classic issue of finding the balance
  between performance and security. The larger the key size, the longer it
  takes for an attacker to crack the key; but larger keys also means more
  resources are needed both when generating signatures (authoritative servers)
  and verifying signatures (recursive servers).</para>

  <para>Of the two sets of keys, ZSK is used much more frequently. Whenever
  zone data changes, or when signatures expire, ZSK is used, so performance
  certainly is of a bigger concern. As for KSK, it is used less frequently, so
  performance is less of a factor, but its impact is bigger because of its role
  in signing other keys.</para>

  <para>In this guide, the following key length were chosen for each set, with
  the recommendation that they be rotated more frequently for better security:

   <itemizedlist>
    <listitem>
     <simpara><emphasis>ZSK</emphasis>:
     RSA 1024 bits, rollover every year</simpara>
    </listitem>
    <listitem>
     <simpara><emphasis>KSK</emphasis>:
     RSA 2048 bits, rollover every five years</simpara>
    </listitem>
   </itemizedlist>
  
  </para>

  <para>These should be the minimum key sizes one should choose.  At the time
  of writing (late 2016) the root zone and many TLDs are already using 2048 bit
  ZSKs.</para>

  <para>If you choose to implement larger key sizes, keep in mind that larger
  key size results in larger DNS responses, and this may mean more load on
  network resources. Depending on network configuration, end users may even
  experience resolution failures due to the increased response sizes, as we
  have discussed in <xref linkend="whats-edns0-all-about" />.</para>

 </section>
</section>
