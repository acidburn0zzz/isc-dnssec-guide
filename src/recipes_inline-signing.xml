<section id="recipes-inline-signing">
 <title>Inline Signing Recipes</title>

 <para>There are two recipes here, the first shows an example of using inline
 signing on the master server, which is what we have covered in this guide thus
 far; the second example shows how to setup a "bump in the wire" between the
 hidden master and the slave servers to seamlessly sign the zone on the
 fly.</para>

 <section id="recipes-inline-signing-master">
  <title>Master Server Inline Signing Recipe</title>
   <para>In this recipe, our servers are illustrated as shown in <xref
   linkend="inline-signing-1" />: we have a master server 192.168.1.1 and three
   slave servers (192.168.1.2, 192.168.1.3, and 192.168.1.4) that receive zone
   transfers. In order to get the zone signed, we need to reconfigure the master
   server,  Once reconfigured, a
   signed version of the zone is generated on the fly by inline-signing, and
   zone transfers will take care of synchronizing the signed zone data to all
   slave name servers, without configuration or software changes on the slave
   servers.</para>
 
   <figure id="inline-signing-1">
    <title>Inline Signing Recipe #1</title>
    <mediaobject>
     <imageobject>
      <imagedata fileref="../img/dnssec-inline-signing-1.png" width="80%" scalefit="1"/>
     </imageobject>
    </mediaobject>
   </figure>

   <para>Using the method described in
   <xref linkend="easy-start-guide-for-authoritative-servers"/>, we just need to
   add a <code>dnssec-policy</code> statement to the relevant zone clause.  This
   is what the <filename>named.conf</filename> looks like on the
   master server, 192.168.1.1:</para>

   <screen>zone "example.com" IN {
    type master;
    file "db/example.com.db";
    key-directory "keys/example.com";
    dnssec-policy default;
    allow-transfer { 192.168.1.2; 192.168.1.3; 192.168.1.4; };
};</screen>

   <para>We have chosen to use the default policy, storing the keys generated for
   the zone in the directory <filename>keys/example.com</filename>. If you wish
   to use a custom policy, then you need to define the policy in the configuration
   file and select it in the zone statement (as described in
   <xref linkend="signing-custom-policy"/>).</para>

   <para>On the slave servers, <filename>named.conf</filename> does not need to
   be updated, and it looks like this:</para>

   <screen>zone "example.com" IN {
    type slave;
    file "db/example.com.db";
    masters { 192.168.1.1; };
};</screen>

   <para>In fact, the slave servers do not even need to be running BIND, it could be
   running any other DNS product that has DNSSEC support.</para>
 </section>

 
 <!-- "Bump in the Wire" -->
 <section id="recipes-inline-signing-bump-in-the-wire">
  <title>"Bump in the Wire" Inline Signing Recipe</title>
  
  <para>In this recipe, we are taking advantage of the power of inline signing
  by placing an additional name server 192.168.1.5 between the hidden master
  (192.168.1.1) and the DNS slaves (192.168.1.2, 192.168.1.3, and 192.168.1.4).
  The additional name server 192.168.1.5 acts as a "bump in the wire", taking
  unsigned zone from the hidden master on one end, and sending out signed data
  on the other end to the slave name servers. The steps described in this
  recipe may be used as part of the DNSSEC deployment strategy, since it
  requires minimal changes made to the existing hidden DNS master and DNS
  slaves. </para>


  <figure id="inline-signing-2">
   <title>Inline Signing Scenario #2</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="../img/dnssec-inline-signing-2.png" width="100%" scalefit="1"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>It is important to remember that 192.168.1.1 in this case is a hidden
  master not exposed to the world, it must not be listed in the NS RRset.
  Otherwise the world will get conflicting answers, unsigned answers from the
  hidden master, and signed answers from the other name servers.</para>

  <para>The only configuration change needed on the hidden master 192.168.1.1 is to
  make sure it allows our middle box to perform a zone transfer:</para>

  <screen>zone "example.com" IN {
    ...
    allow-transfer { 192.168.1.5; };
    ...
};</screen>

  <para>On the middle box 192.168.1.5, all the tasks described in <xref
  linkend="easy-start-guide-for-authoritative-servers" /> still need to be
  performed, such as generating key pairs and uploading information to parent
  zone. This server is configured as slave to the hidden master 192.168.1.1,
  receiving the unsigned data, and then using keys accessible to this middle
  box, sign data on the fly, and send out the signed data via zone transfer to
  the other three DNS slaves. Its <filename>named.conf</filename> looks like
  this:</para>

  <screen>zone example.com {
    type slave;
    masters { 192.168.1.1; };
    file "db/example.com.db";
    key-directory "keys/example.com";
    dnssec-policy default;
    allow-transfer { 192.168.1.2; 192.168.1.3; 192.168.1.4; };
};</screen>

  <para>(As before, the default policy has been selected here.  See
  <xref linkend="signing-custom-policy"/> for instructions as to how to define
  and use a custom policy.)</para>

  <para>Finally, on the three slave servers, configuration should be updated to
  receive zone transfer from 192.168.1.5 (middle box) instead of 192.168.1.1
  (hidden master). If using BIND, the <filename>named.conf</filename> looks
  like this:</para>

  <screen>zone "example.com" IN {
    type slave;
    file "db/example.com.db";
    masters { 192.168.1.5; };   # this was 192.168.1.1 before!
};</screen>
 </section>
</section>
